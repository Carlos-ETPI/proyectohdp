{"version":3,"file":"chart.cjs","sources":["../src/core/core.animator.js","../src/core/core.animation.js","../src/core/core.animations.js","../src/core/core.datasetController.js","../src/controllers/controller.bar.js","../src/controllers/controller.bubble.js","../src/controllers/controller.doughnut.js","../src/controllers/controller.line.js","../src/controllers/controller.polarArea.js","../src/controllers/controller.pie.js","../src/controllers/controller.radar.js","../src/controllers/controller.scatter.js","../src/core/core.adapters.ts","../src/core/core.interaction.js","../src/core/core.layouts.js","../src/platform/platform.base.js","../src/platform/platform.basic.js","../src/platform/platform.dom.js","../src/platform/index.js","../src/core/core.element.ts","../src/core/core.scale.autoskip.js","../src/core/core.scale.js","../src/core/core.typedRegistry.js","../src/core/core.registry.js","../src/core/core.plugins.js","../src/core/core.config.js","../src/core/core.controller.js","../src/elements/element.arc.ts","../src/elements/element.line.js","../src/elements/element.point.ts","../src/elements/element.bar.js","../src/plugins/plugin.colors.ts","../src/plugins/plugin.decimation.js","../src/plugins/plugin.filler/filler.segment.js","../src/plugins/plugin.filler/filler.helper.js","../src/plugins/plugin.filler/filler.options.js","../src/plugins/plugin.filler/filler.target.stack.js","../src/plugins/plugin.filler/simpleArc.js","../src/plugins/plugin.filler/filler.target.js","../src/plugins/plugin.filler/filler.drawing.js","../src/plugins/plugin.filler/index.js","../src/plugins/plugin.legend.js","../src/plugins/plugin.title.js","../src/plugins/plugin.subtitle.js","../src/plugins/plugin.tooltip.js","../src/scales/scale.category.js","../src/scales/scale.linearbase.js","../src/scales/scale.linear.js","../src/scales/scale.logarithmic.js","../src/scales/scale.radialLinear.js","../src/scales/scale.time.js","../src/scales/scale.timeseries.js","../src/index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\n\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (an thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal meta data accordingly.\n\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const skipNull = (meta) => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash'),\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<string, string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<string, string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\n/**\n * @typedef { import('../types/index.js').Chart } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  /** @type {CanvasTextAlign} */\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = /** @type {string} */ (label[j]);\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis\n      || axisFromPosition(opts.position)\n      || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {axis};\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter((d) => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nfunction getDatasetArea(meta) {\n  const {xScale, yScale} = meta;\n  if (xScale && yScale) {\n    return {\n      left: xScale.left,\n      right: xScale.right,\n      top: yScale.top,\n      bottom: yScale.bottom\n    };\n  }\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta) || this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the envent inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle, borderDash, borderDashOffset} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius'\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\n/**\n * @returns {any}\n */\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || (elements && containsColorsDefinitions(elements)))) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data,\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of an segment -> need to add another point before this,\n      // from next line below.\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of an segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : (labelColor.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({value: tickValue});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {extra, additionalAngle, padding, size} = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    // if to draw or overlapped\n    visible: true,\n\n    // Text position\n    x: pointLabelPosition.x,\n    y,\n\n    // Text rendering data\n    textAlign,\n\n    // Bounding box\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {left, top, right, bottom} = item;\n  const apexesInArea = _isPointInArea({x: left, y: top}, area) || _isPointInArea({x: left, y: bottom}, area) ||\n    _isPointInArea({x: right, y: top}, area) || _isPointInArea({x: right, y: bottom}, area);\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {centerPointLabels, display} = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {left, top, right, bottom} = item;\n  const {backdropColor} = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius,\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      // overlapping\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign} = item;\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if its not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @private\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guesstimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"],"names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","Date","now","remaining","running","items","length","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","transparent","interpolators","boolean","from","to","factor","color","c0","helpersColor","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","animator","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","isFinite","sign","convertObjectDataToArray","data","adata","Array","isStacked","meta","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","grouped","numbers","overrides","_index_","offset","grid","_value_","beginAtZero","iAxisKey","vAxisKey","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","skipNull","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","animateRotate","animateScale","spacing","descriptors","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","onClick","e","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","formatNumber","locale","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","segment","animated","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","angleLines","display","circular","pointLabels","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","defaultRoutes","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","merge","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","callCallback","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","d","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getDatasetArea","Chart","version","invalidatePlugins","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","Interaction","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","_readValueToProps","parseBorderRadius","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","capBezierPoints","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","forceOverride","_args","chartOptions","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","algorithm","beforeElementsUpdate","xAxis","threshold","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_normalizeAngle","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","_element","afterEvent","ci","useBorderRadius","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","WeakMap","positioners","average","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","generateTicks","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","tickValue","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","minExp","exp","significand","lastTick","LogarithmicScale","logarithmic","_zero","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","createPointLabelItem","itemOpts","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","apexesInArea","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","animate","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","adapters","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"mappings":"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"}